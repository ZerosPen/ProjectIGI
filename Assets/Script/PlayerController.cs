//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Script/PlayerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerController"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""9caab7d3-c35d-4c40-8c8c-50367327364f"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""8b505c2e-cde0-451e-b26b-895fd1797a17"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""708a036e-285c-4593-99de-025e68f11397"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d6abaea1-a09d-475a-b675-914c5e2362fa"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3711e48a-8b36-4bb9-b750-7c4340b80690"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""06bd9a9a-b9b8-4603-aa02-eeb1c1e3b90b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cc9addcd-9827-423f-bf1c-fcf7f66ceab9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""FlashLight"",
            ""id"": ""148d5f7c-9e9a-4de6-bfc4-c76e712ad0fd"",
            ""actions"": [
                {
                    ""name"": ""TurnOnFlashLight"",
                    ""type"": ""Button"",
                    ""id"": ""abf9637c-764f-4c09-a130-95bdb42dac5b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchMode"",
                    ""type"": ""Button"",
                    ""id"": ""b6e7924b-b6d1-431e-ba4f-fc4b5ea93791"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveFlash"",
                    ""type"": ""Value"",
                    ""id"": ""b4c07c0c-59d7-4e7c-b275-e0ae6fb94492"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""25c3f1cf-4ee6-4700-9c07-d8a44c564569"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnOnFlashLight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d6c099e-e978-455e-aabb-eb36e3f20dd3"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b723e557-1c48-41a3-a372-70f0822f0c02"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveFlash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""interactive"",
            ""id"": ""4961ecea-f87b-4817-9def-f4a8ddf69dec"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""b4223762-4406-48d2-9123-fe527d3c6086"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""16b53f69-148f-4a26-bbfc-45390b99a146"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Movement = m_Movement.FindAction("Movement", throwIfNotFound: true);
        // FlashLight
        m_FlashLight = asset.FindActionMap("FlashLight", throwIfNotFound: true);
        m_FlashLight_TurnOnFlashLight = m_FlashLight.FindAction("TurnOnFlashLight", throwIfNotFound: true);
        m_FlashLight_SwitchMode = m_FlashLight.FindAction("SwitchMode", throwIfNotFound: true);
        m_FlashLight_MoveFlash = m_FlashLight.FindAction("MoveFlash", throwIfNotFound: true);
        // interactive
        m_interactive = asset.FindActionMap("interactive", throwIfNotFound: true);
        m_interactive_Interact = m_interactive.FindAction("Interact", throwIfNotFound: true);
    }

    ~@PlayerController()
    {
        UnityEngine.Debug.Assert(!m_Movement.enabled, "This will cause a leak and performance issues, PlayerController.Movement.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_FlashLight.enabled, "This will cause a leak and performance issues, PlayerController.FlashLight.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_interactive.enabled, "This will cause a leak and performance issues, PlayerController.interactive.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Movement;
    public struct MovementActions
    {
        private @PlayerController m_Wrapper;
        public MovementActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Movement_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // FlashLight
    private readonly InputActionMap m_FlashLight;
    private List<IFlashLightActions> m_FlashLightActionsCallbackInterfaces = new List<IFlashLightActions>();
    private readonly InputAction m_FlashLight_TurnOnFlashLight;
    private readonly InputAction m_FlashLight_SwitchMode;
    private readonly InputAction m_FlashLight_MoveFlash;
    public struct FlashLightActions
    {
        private @PlayerController m_Wrapper;
        public FlashLightActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @TurnOnFlashLight => m_Wrapper.m_FlashLight_TurnOnFlashLight;
        public InputAction @SwitchMode => m_Wrapper.m_FlashLight_SwitchMode;
        public InputAction @MoveFlash => m_Wrapper.m_FlashLight_MoveFlash;
        public InputActionMap Get() { return m_Wrapper.m_FlashLight; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlashLightActions set) { return set.Get(); }
        public void AddCallbacks(IFlashLightActions instance)
        {
            if (instance == null || m_Wrapper.m_FlashLightActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FlashLightActionsCallbackInterfaces.Add(instance);
            @TurnOnFlashLight.started += instance.OnTurnOnFlashLight;
            @TurnOnFlashLight.performed += instance.OnTurnOnFlashLight;
            @TurnOnFlashLight.canceled += instance.OnTurnOnFlashLight;
            @SwitchMode.started += instance.OnSwitchMode;
            @SwitchMode.performed += instance.OnSwitchMode;
            @SwitchMode.canceled += instance.OnSwitchMode;
            @MoveFlash.started += instance.OnMoveFlash;
            @MoveFlash.performed += instance.OnMoveFlash;
            @MoveFlash.canceled += instance.OnMoveFlash;
        }

        private void UnregisterCallbacks(IFlashLightActions instance)
        {
            @TurnOnFlashLight.started -= instance.OnTurnOnFlashLight;
            @TurnOnFlashLight.performed -= instance.OnTurnOnFlashLight;
            @TurnOnFlashLight.canceled -= instance.OnTurnOnFlashLight;
            @SwitchMode.started -= instance.OnSwitchMode;
            @SwitchMode.performed -= instance.OnSwitchMode;
            @SwitchMode.canceled -= instance.OnSwitchMode;
            @MoveFlash.started -= instance.OnMoveFlash;
            @MoveFlash.performed -= instance.OnMoveFlash;
            @MoveFlash.canceled -= instance.OnMoveFlash;
        }

        public void RemoveCallbacks(IFlashLightActions instance)
        {
            if (m_Wrapper.m_FlashLightActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFlashLightActions instance)
        {
            foreach (var item in m_Wrapper.m_FlashLightActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FlashLightActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FlashLightActions @FlashLight => new FlashLightActions(this);

    // interactive
    private readonly InputActionMap m_interactive;
    private List<IInteractiveActions> m_InteractiveActionsCallbackInterfaces = new List<IInteractiveActions>();
    private readonly InputAction m_interactive_Interact;
    public struct InteractiveActions
    {
        private @PlayerController m_Wrapper;
        public InteractiveActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_interactive_Interact;
        public InputActionMap Get() { return m_Wrapper.m_interactive; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractiveActions set) { return set.Get(); }
        public void AddCallbacks(IInteractiveActions instance)
        {
            if (instance == null || m_Wrapper.m_InteractiveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteractiveActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IInteractiveActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IInteractiveActions instance)
        {
            if (m_Wrapper.m_InteractiveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteractiveActions instance)
        {
            foreach (var item in m_Wrapper.m_InteractiveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteractiveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteractiveActions @interactive => new InteractiveActions(this);
    public interface IMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IFlashLightActions
    {
        void OnTurnOnFlashLight(InputAction.CallbackContext context);
        void OnSwitchMode(InputAction.CallbackContext context);
        void OnMoveFlash(InputAction.CallbackContext context);
    }
    public interface IInteractiveActions
    {
        void OnInteract(InputAction.CallbackContext context);
    }
}
